<?php


use Drupal\Core\Routing\RouteMatchInterface;

/**
* Implements hook_help().
*/
function hello_world_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
  case 'help.page.hello_world':
    $output = '';
    $output .= '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('This is an example module.') . '</p>';
    return $output;
    default:
  }
}

///**
// * Implements hook_mail().
// */
//function hello_world_mail($key, &$message, $params) {
//  switch ($key) {
//    case 'hello_world_log':
//      $message['from'] = \Drupal::config('system.site')->get('mail');
//      $message['subject'] = t('There is an error on your website');
//      $message['body'][] = $params['message'];
//      break; }
//}



/**
 * Implements hook_mail_alter().
 *
 * So, in our example, we are setting an HTML header so that whatever is
 * getting sent out could be rendered as an HTML. After this hook is invoked,
 * the mail system formatter is also called, which, in the case of the PhpMail
 * plugin, transforms all HTML tags into plain text, essentially canceling out
 * our header. However, if we implement our own plugin, we can prevent that
 * and successfully send out HTML emails with proper tags and everything.
 */
function hello_world_mail_alter(&$message) {
  switch ($message['key']) {
    case 'hello_world_log':
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
      break;
  }
}

/**
 * Implements hook_mail().
 */
function hello_world_mail($key, &$message, $params) {
  switch ($key) {
    case 'hello_world_log':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('There is an error on your website');
      $message['body'][] = $params['message'];
      if (isset($params['user'])) {
        $user_message = 'The user that was logged in: [current-user:name]';
        $message['body'][] = \Drupal::token()->replace($user_message, ['current-user' => $params['user']]);
      }

      break;
  }
}

/**
 * Implements hook_theme().
 */
function hello_world_theme($existing, $type, $theme, $path) {
  return [
    'hello_world_salutation' => [
      'variables' => ['salutation' => NULL, 'target' => NULL, 'overridden' => FALSE],
    ],
  ];
}

/**
 * Default preprocessor function for the hello_world_salutation theme hook.
 */
function template_preprocess_hello_world_salutation(&$variables) {
  $variables['attributes'] = [
    'class' => ['salutation'],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function hello_world_theme_suggestions_hello_world_salutation($variables) {
  $suggestions = [];

  if ($variables['overridden'] == TRUE) {
    $suggestions[] = 'hello_world_salutation__overridden';
  }

  return $suggestions;
}





